<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="approvalReqDAO">
	<!-- 예약 마감 기안문 등록 -->
	<insert id="insertApprovalReq" parameterType="approvalReqVO">
		<selectKey keyProperty="idx,docId" keyColumn="gen_idx,gen_id" resultType="map" order="BEFORE">
			SELECT
				'APREQ-' || COALESCE(
				(
					SELECT (SUBSTRING(idx FROM 7))::int + 1
					FROM approval_req
					ORDER BY (SUBSTRING(idx FROM 7))::int DESC
					LIMIT 1
					FOR UPDATE
				), 1) AS gen_idx,
				'WINI' || TO_CHAR(NOW(), 'YYYYMMDD') || (
					COALESCE((
						SELECT COUNT(*) + 1
						FROM approval_req
						WHERE TO_CHAR(created_at, 'YYYYMMDD') = TO_CHAR(NOW(), 'YYYYMMDD')
					), 1)
				) AS gen_id
		</selectKey>
		INSERT INTO approval_req
			(idx, approval_line_idx, program_schedule_idx, req_user_idx, doc_id, title, content, status, created_at)
		VALUES
			(#{idx}, #{approvalLineIdx}, #{programScheduleIdx}, #{reqUserIdx}, #{docId}, #{title}, #{content}, #{status}, NOW())
	</insert>
	
	
	<!-- 관리자가 작성한 예약 마감 기안문 목록 조회 -->
	<select id="selectApprovalReqListByReqUserIdx" parameterType="String" resultType="approvalReqVO">
		SELECT
			idx,
			approval_line_idx,
			program_schedule_idx,
			req_user_idx,
			doc_id,
			title,
			content,
			status,
			created_at
		FROM approval_req
		WHERE req_user_idx = #{reqUserIdx}
		ORDER BY (SUBSTRING(idx FROM 7))::int DESC
	</select>
	
	<!-- 관리자에게 결재 요청받은 예약 마감 기안문 목록 조회 -->
	<select id="selectApprovalReqListBySnapUserIdx" parameterType="map" resultType="approvalReqVO">
		SELECT
			ar.idx,
			COUNT(*) OVER() - ROW_NUMBER() OVER(ORDER BY ar.created_at DESC) + 1 AS number,
			ar.approval_line_idx,
			ar.program_schedule_idx,
			ar.req_user_idx,
			u.user_name AS userName,
			ar.doc_id,
			ar.title,
			ar.content,
			ar.status,
			ar.created_at
		FROM approval_req ar
		JOIN "user" u ON ar.req_user_idx = u.idx
		JOIN approval_line_snapshot ls ON ar.idx = ls.approval_req_idx
		WHERE ls.user_idx = #{userIdx} AND ls.is_locked = false
		GROUP BY
			ar.idx, ar.approval_line_idx, ar.program_schedule_idx, ar.req_user_idx,
			u.user_name, ar.doc_id, ar.title, ar.content, ar.status, ar.created_at
		ORDER BY (SUBSTRING(ar.idx FROM 7))::int DESC
		LIMIT #{recordCountPerPage}
 		OFFSET #{firstIndex}
	</select>
	
		<!-- 관리자에게 결재 요청받은 예약 마감 기안문 개수 조회 -->
	<select id="selectSnapApprovalReqCount" parameterType="String" resultType="int">
		SELECT
			COUNT(*)
		FROM approval_req ar
		JOIN approval_line_snapshot ls ON ar.idx = ls.approval_req_idx
		WHERE ls.user_idx = #{userIdx} AND ls.is_locked = false
	</select>
	
	<!-- 프로그램 일정의 예약 마감 기안문 상세 조회 -->
	<select id="selectApprovalReq" parameterType="String" resultType="approvalReqVO">
		SELECT
			ar.idx,
			ar.approval_line_idx,
			ar.program_schedule_idx,
			ar.req_user_idx,
			u.user_name AS userName,
			u.department AS userDepartment,
			u.position AS userPosition,
			ar.doc_id,
			ar.title,
			ar.content,
			ar.status,
			ar.created_at
		FROM approval_req ar
		JOIN "user" u ON ar.req_user_idx = u.idx
		WHERE ar.idx = #{idx}
	</select>

	<!-- 프로그램 일정의 예약 마감 기안문 상세 조회 -->
	<select id="selectApprovalReqByProgramScheduleIdx" parameterType="String" resultType="approvalReqVO">
		SELECT
			ar.idx,
			ar.approval_line_idx,
			ar.program_schedule_idx,
			ar.req_user_idx,
			u.user_name AS userName,
			u.department AS userDepartment,
			u.position AS userPosition,
			ar.doc_id,
			ar.title,
			ar.content,
			ar.status,
			ar.created_at
		FROM approval_req ar
		JOIN "user" u ON ar.req_user_idx = u.idx
		WHERE ar.program_schedule_idx = #{programScheduleIdx}
		ORDER BY ar.created_at DESC
		LIMIT 1 -- 여러 기안문 선택 가능성 방지
	</select>
	
	<!-- 예약 마감 기안문 상태 업데이트 -->
	<update id="updateApprovalReq" parameterType="approvalReqVO">
		UPDATE approval_req
		SET status = #{status}
		WHERE idx = #{idx}
	</update>

	<!-- 예약 마감 기안문 삭제 -->
	<delete id="deleteApprovalReq" parameterType="String">
		DELETE FROM approval_req WHERE idx = #{idx}
	</delete>
	
</mapper>